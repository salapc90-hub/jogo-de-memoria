<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Jogo da Mem√≥ria com N√≠veis</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background: #222;
            color: #fff;
            text-align: center;
            padding: 20px;
        }

        h1 {
            margin-bottom: 10px;
        }

        #status {
            margin-bottom: 15px;
            font-size: 18px;
        }

        #game-board {
            display: grid;
            grid-gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }

        .card {
            width: 80px;
            height: 80px;
            background-color: #444;
            color: transparent;
            font-size: 2em;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 10px;
            transition: background 0.3s, transform 0.2s;
        }

        .card:hover {
            transform: scale(1.05);
        }

        .flipped, .matched {
            background-color: #fff;
            color: #111;
        }

        .matched {
            background-color: #4CAF50;
            color: white;
            pointer-events: none;
        }

        #next-level {
            display: none;
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Jogo da Mem√≥ria</h1>
    <div id="status">
        <strong>N√≠vel:</strong> <span id="level">1</span> |
        <strong>Pontua√ß√£o:</strong> <span id="score">0</span> |
        <strong>Tempo:</strong> <span id="timer">60</span>s
    </div>
    <div id="game-board"></div>
    <button id="next-level">Pr√≥ximo N√≠vel</button>

    <!-- Sons -->
    <audio id="click-sound" src="click.mp3"></audio>
    <audio id="match-sound" src="acerto.mp3"></audio>
    <audio id="error-sound" src="erro.mp3"></audio>

    <script>
        const emojisBase = ['üê∂','üê±','üê≠','üêπ','üê∞','ü¶ä','üêª','üêº','üê∏','üê∑','ü¶Å','üêØ','üêÆ','üê®','üêî'];
        const board = document.getElementById('game-board');
        const levelSpan = document.getElementById('level');
        const scoreSpan = document.getElementById('score');
        const timerSpan = document.getElementById('timer');
        const nextLevelBtn = document.getElementById('next-level');

        const clickSound = document.getElementById('click-sound');
        const matchSound = document.getElementById('match-sound');
        const errorSound = document.getElementById('error-sound');

        let flippedCards = [];
        let lockBoard = false;
        let matchedPairs = 0;
        let level = 1;
        let score = 0;
        let timer;
        let timeLeft = 60;

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

      function startTimer() {
    clearInterval(timer);
    timeLeft = 60; // Corrigido: tempo fixo de 60 segundos por n√≠vel
    timerSpan.innerText = timeLeft;
    timer = setInterval(() => {
        timeLeft--;
        timerSpan.innerText = timeLeft;
        if (timeLeft <= 0) {
            clearInterval(timer);
            alert('‚è∞ Tempo esgotado! Fim de jogo.');
            resetGame();
        }
    }, 1000);
}

        function createBoard() {
            board.innerHTML = '';
            flippedCards = [];
            matchedPairs = 0;

            const pairs = level + 3;
            const emojis = emojisBase.slice(0, pairs);
            const cards = [...emojis, ...emojis];
            shuffle(cards);

            // Ajusta o grid dinamicamente
            const columns = Math.ceil(Math.sqrt(cards.length));
            board.style.gridTemplateColumns = `repeat(${columns}, 80px)`;

            cards.forEach((emoji, index) => {
                const card = document.createElement('div');
                card.classList.add('card');
                card.dataset.emoji = emoji;
                card.dataset.index = index;
                card.innerText = '';
                card.addEventListener('click', flipCard);
                board.appendChild(card);
            });

            startTimer();
        }

        function flipCard() {
            if (lockBoard) return;
            if (this.classList.contains('flipped') || this.classList.contains('matched')) return;

            clickSound.play();
            this.classList.add('flipped');
            this.innerText = this.dataset.emoji;
            flippedCards.push(this);

            if (flippedCards.length === 2) {
                checkMatch();
            }
        }

        function checkMatch() {
            const [card1, card2] = flippedCards;
            if (card1.dataset.emoji === card2.dataset.emoji) {
                card1.classList.add('matched');
                card2.classList.add('matched');
                matchedPairs++;
                score += 100 * level;
                scoreSpan.innerText = score;
                matchSound.play();
                if (matchedPairs === (level + 3)) {
                    clearInterval(timer);
                    nextLevelBtn.style.display = 'inline-block';
                }
            } else {
                lockBoard = true;
                errorSound.play();
                score -= 10;
                scoreSpan.innerText = score;
                setTimeout(() => {
                    card1.classList.remove('flipped');
                    card2.classList.remove('flipped');
                    card1.innerText = '';
                    card2.innerText = '';
                    lockBoard = false;
                }, 800);
            }
            flippedCards = [];
        }

        function nextLevel() {
            level++;
            levelSpan.innerText = level;
            nextLevelBtn.style.display = 'none';
            createBoard();
        }

        function resetGame() {
            level = 1;
            score = 0;
            levelSpan.innerText = level;
            scoreSpan.innerText = score;
            nextLevelBtn.style.display = 'none';
            createBoard();
        }

        nextLevelBtn.addEventListener('click', nextLevel);

        createBoard();
    </script>
</body>
</html>

