<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Jogo da Mem√≥ria com N√≠veis</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            text-align: center;
            padding: 20px;
            min-height: 100vh;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .player-section {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .player-input {
            padding: 10px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            margin-right: 10px;
            width: 250px;
        }

        .btn {
            padding: 10px 20px;
            font-size: 16px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .btn:hover {
            background: #45a049;
        }

        .btn:disabled {
            background: #666;
            cursor: not-allowed;
        }

        .btn-secondary {
            background: #2196F3;
        }

        .btn-secondary:hover {
            background: #0b7dda;
        }

        #game-buttons {
            margin-top: 20px;
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .btn-danger {
            background: #ff9800;
        }

        .btn-danger:hover {
            background: #e68900;
        }

        #status {
            margin-bottom: 15px;
            font-size: 18px;
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
        }

        #game-board {
            display: grid;
            grid-gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }

        .card {
            width: 80px;
            height: 80px;
            background-color: #444;
            color: transparent;
            font-size: 2em;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 10px;
            transition: background 0.3s, transform 0.2s;
        }

        .card:hover {
            transform: scale(1.05);
        }

        .flipped, .matched {
            background-color: #fff;
            color: #111;
        }

        .matched {
            background-color: #4CAF50;
            color: white;
            pointer-events: none;
        }

        #next-level {
            display: none;
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        .ranking-section {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            max-height: 400px;
            overflow-y: auto;
        }

        .ranking-section h2 {
            margin-bottom: 15px;
        }

        .ranking-item {
            background: rgba(255,255,255,0.15);
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .ranking-item:nth-child(even) {
            background: rgba(255,255,255,0.1);
        }

        .rank-position {
            font-weight: bold;
            font-size: 1.2em;
            min-width: 30px;
        }

        .ranking-info {
            flex: 1;
            text-align: left;
            margin-left: 20px;
        }

        .ranking-score {
            font-size: 1.1em;
            font-weight: bold;
        }

        .player-name-display {
            margin-top: 10px;
            font-size: 18px;
            font-weight: bold;
        }

        .buttons-container {
            margin-top: 15px;
        }

        .buttons-container button {
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ Jogo da Mem√≥ria üéÆ</h1>
        
        <div class="player-section">
            <input type="text" id="player-name" class="player-input" placeholder="Digite seu nome" maxlength="20">
            <button class="btn btn-secondary" id="start-game" onclick="startNewGame()">Come√ßar Jogo</button>
            <button class="btn btn-secondary" id="show-ranking" onclick="toggleRanking()">Ver Ranking</button>
        </div>

        <div id="player-name-display" class="player-name-display"></div>

        <div id="status" style="display: none;">
            <strong>Jogador:</strong> <span id="current-player">-</span> |
            <strong>N√≠vel:</strong> <span id="level">1</span> |
            <strong>Pontua√ß√£o:</strong> <span id="score">0</span> |
            <strong>Tempo:</strong> <span id="timer">60</span>s
        </div>

        <div id="game-board"></div>

        <div id="game-buttons" style="display: none;">
            <button id="restart-game" class="btn" style="background: #ff9800;">üîÑ Reiniciar Jogo</button>
            <button id="next-level" class="btn" style="display: none;">Pr√≥ximo N√≠vel</button>
        </div>

        <div id="ranking-section" class="ranking-section" style="display: none;">
            <h2>üèÜ Ranking de Tempos</h2>
            <div id="ranking-list"></div>
        </div>
    </div>

    <script>
        const emojisBase = ['üê∂','üê±','üê≠','üêπ','üê∞','ü¶ä','üêª','üêº','üê∏','üê∑','ü¶Å','üêØ','üêÆ','üê®','üêî'];
        const board = document.getElementById('game-board');
        const levelSpan = document.getElementById('level');
        const scoreSpan = document.getElementById('score');
        const timerSpan = document.getElementById('timer');
        const nextLevelBtn = document.getElementById('next-level');
        const restartBtn = document.getElementById('restart-game');
        const gameButtonsDiv = document.getElementById('game-buttons');
        const playerNameDisplay = document.getElementById('player-name-display');
        const currentPlayerSpan = document.getElementById('current-player');
        const statusDiv = document.getElementById('status');

        let flippedCards = [];
        let lockBoard = false;
        let matchedPairs = 0;
        let level = 1;
        let score = 0;
        let timer;
        let timeLeft = 60;
        let playerName = '';
        let startTime = 0;
        let gameStarted = false;

        // Sistema de som usando Web Audio API
        function playSound(type) {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            
            switch(type) {
                case 'click':
                    playTone(audioContext, 400, 0.1, 0.1);
                    break;
                case 'match':
                    playTone(audioContext, 600, 0.15, 0.2);
                    setTimeout(() => playTone(audioContext, 800, 0.15, 0.3), 100);
                    break;
                case 'error':
                    playTone(audioContext, 200, 0.3, 0.3);
                    break;
            }
        }

        function playTone(audioContext, frequency, duration, volume) {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = frequency;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration);
        }

        function startNewGame() {
            const name = document.getElementById('player-name').value.trim();
            if (!name) {
                alert('Por favor, digite seu nome!');
                return;
            }

            playerName = name;
            currentPlayerSpan.textContent = playerName;
            playerNameDisplay.textContent = `üïπÔ∏è Jogador: ${playerName}`;
            gameStarted = true;
            startTime = Date.now();

            document.getElementById('player-name').disabled = true;
            document.getElementById('start-game').disabled = true;
            statusDiv.style.display = 'block';
            gameButtonsDiv.style.display = 'block';

            resetGame();
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function startTimer() {
            clearInterval(timer);
            timeLeft = 60;
            timerSpan.innerText = timeLeft;
            timer = setInterval(() => {
                timeLeft--;
                timerSpan.innerText = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    alert('‚è∞ Tempo esgotado! Fim de jogo.');
                    endGame();
                }
            }, 1000);
        }

        function createBoard() {
            board.innerHTML = '';
            flippedCards = [];
            matchedPairs = 0;

            const pairs = level + 3;
            const emojis = emojisBase.slice(0, pairs);
            const cards = [...emojis, ...emojis];
            shuffle(cards);

            const columns = Math.ceil(Math.sqrt(cards.length));
            board.style.gridTemplateColumns = `repeat(${columns}, 80px)`;

            cards.forEach((emoji, index) => {
                const card = document.createElement('div');
                card.classList.add('card');
                card.dataset.emoji = emoji;
                card.dataset.index = index;
                card.innerText = '';
                card.addEventListener('click', flipCard);
                board.appendChild(card);
            });

            startTimer();
        }

        function flipCard() {
            if (!gameStarted || lockBoard) return;
            if (this.classList.contains('flipped') || this.classList.contains('matched')) return;

            playSound('click');
            this.classList.add('flipped');
            this.innerText = this.dataset.emoji;
            flippedCards.push(this);

            if (flippedCards.length === 2) {
                checkMatch();
            }
        }

        function checkMatch() {
            const [card1, card2] = flippedCards;
            if (card1.dataset.emoji === card2.dataset.emoji) {
                card1.classList.add('matched');
                card2.classList.add('matched');
                matchedPairs++;
                score += 100 * level;
                scoreSpan.innerText = score;
                playSound('match');
                
                if (matchedPairs === (level + 3)) {
                    clearInterval(timer);
                    // Calcula o tempo total decorrido
                    const totalTime = 60 - timeLeft + (level - 1) * 60;
                    alert(`üéâ N√≠vel ${level} completo! Tempo: ${totalTime}s`);
                    
                    if (level < 10) {
                        nextLevelBtn.style.display = 'inline-block';
                    } else {
                        alert('üéä Parab√©ns! Voc√™ completou todos os n√≠veis!');
                        endGame();
                    }
                }
            } else {
                lockBoard = true;
                playSound('error');
                score -= 10;
                scoreSpan.innerText = score;
                setTimeout(() => {
                    card1.classList.remove('flipped');
                    card2.classList.remove('flipped');
                    card1.innerText = '';
                    card2.innerText = '';
                    lockBoard = false;
                }, 800);
            }
            flippedCards = [];
        }

        function nextLevel() {
            level++;
            levelSpan.innerText = level;
            nextLevelBtn.style.display = 'none';
            createBoard();
        }

        function resetGame() {
            level = 1;
            score = 0;
            levelSpan.innerText = level;
            scoreSpan.innerText = score;
            nextLevelBtn.style.display = 'none';
            createBoard();
        }

        function endGame() {
            gameStarted = false;
            clearInterval(timer);
            
            // Calcula o tempo total
            const endTime = Date.now();
            const totalTime = Math.floor((endTime - startTime) / 1000);
            
            // Salva o score no ranking
            const ranking = getRanking();
            ranking.push({
                name: playerName,
                score: score,
                time: totalTime,
                level: level,
                date: new Date().toLocaleString('pt-BR')
            });
            
            // Ordena por score (maior primeiro)
            ranking.sort((a, b) => b.score - a.score);
            
            // Mant√©m apenas os top 10
            const topRanking = ranking.slice(0, 10);
            
            saveRanking(topRanking);
            
            alert(`üéÆ Fim de jogo!\n\nüéØ Pontos: ${score}\n‚è±Ô∏è Tempo: ${totalTime}s\nüèÜ N√≠vel alcan√ßado: ${level}`);
            
            showRanking();
        }

        function getRanking() {
            const ranking = localStorage.getItem('memoryGameRanking');
            return ranking ? JSON.parse(ranking) : [];
        }

        function saveRanking(ranking) {
            localStorage.setItem('memoryGameRanking', JSON.stringify(ranking));
        }

        function showRanking() {
            const ranking = getRanking();
            const rankingList = document.getElementById('ranking-list');
            
            if (ranking.length === 0) {
                rankingList.innerHTML = '<p>Nenhum recorde ainda. Seja o primeiro!</p>';
            } else {
                rankingList.innerHTML = ranking.map((entry, index) => `
                    <div class="ranking-item">
                        <span class="rank-position">${index + 1}¬∫</span>
                        <div class="ranking-info">
                            <div><strong>${entry.name}</strong></div>
                            <div style="font-size: 0.9em; color: #ddd;">${entry.date}</div>
                        </div>
                        <div class="ranking-score">
                            <div>üéØ ${entry.score} pts</div>
                            <div>‚è±Ô∏è ${entry.time}s</div>
                            <div>üèÜ N√≠vel ${entry.level}</div>
                        </div>
                    </div>
                `).join('');
            }
            
            document.getElementById('ranking-section').style.display = 'block';
        }

        function toggleRanking() {
            const rankingSection = document.getElementById('ranking-section');
            if (rankingSection.style.display === 'none') {
                showRanking();
            } else {
                rankingSection.style.display = 'none';
            }
        }

        function restartGame() {
            if (confirm('Tem certeza que deseja reiniciar o jogo atual?')) {
                clearInterval(timer);
                gameStarted = false;
                level = 1;
                score = 0;
                
                document.getElementById('player-name').disabled = false;
                document.getElementById('start-game').disabled = false;
                statusDiv.style.display = 'none';
                gameButtonsDiv.style.display = 'none';
                board.innerHTML = '';
                playerNameDisplay.textContent = '';
                
                levelSpan.innerText = level;
                scoreSpan.innerText = score;
                nextLevelBtn.style.display = 'none';
            }
        }

        nextLevelBtn.addEventListener('click', nextLevel);
        restartBtn.addEventListener('click', restartGame);
    </script>
</body>
</html>

